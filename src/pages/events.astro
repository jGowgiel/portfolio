---
import Page from "../layouts/Page.astro";
import "../styles/global.css";
import { allOnAppend, allOffAppend } from "../scripts/sharedconstants";
interface EventCategory {
    title: string;
    events: string[];
}

const eventInfo: EventCategory[] = [
    {
        title: "mouse",
        events: ["mousedown", "mousemove", "mouseup", "mouseenter", "mouseover"],
    },
    { title: "touch", events: ["touchstart", "touchmove", "touchend"] },
    { title: "pointer", events: ["pointerdown", "pointerup", "pointermove"] },
    { title: "click", events: ["click", "dblclick", "contextmenu"] },
    {
        title: "text",
        events: [
            "onblur",
            "blur",
            "focusout",
            "keydown",
            "keyup",
            "keypress",
            "compositionstart",
            "compositionupdate",
            "compositionend",
        ],
    },
    {
        title: "misc",
        events: [
            "gesturestart",
            "gesturechange",
            "gestureend",
            "dragstart",
            "wheel",
            "scale",
            "scroll",
        ],
    },
];
---

<Page title="Touch events" hideOverflow={true} gutterPercent={0}>
    <main>
        <div class="check-container">
            {
                eventInfo.map(({ title, events }) => {
                    return (
                        <div class="check-section">
                            <div class="section-header">
                                <h3>{title}</h3>
                                <button name={title + allOnAppend}>All on</button>
                                <button name={title + allOffAppend}>All off</button>
                            </div>
                            {events.map((event) => {
                                return (
                                    <div>
                                        <input
                                            class="input-check"
                                            type="checkbox"
                                            name={event}
                                            checked="true"
                                        />
                                        <label for={event}>{event}</label>
                                    </div>
                                );
                            })}
                        </div>
                    );
                })
            }
        </div>
        <div class="input-output">
            <div class="inputs">
                <div class="square"></div>
                <textarea class="square"></textarea>
            </div>
            <div class="output"></div>
        </div>
    </main>
    <script>
        import { allOnAppend } from "../scripts/sharedconstants";

        /**
         * Setup the core batch of listeners on each `square`, which cause all the events configured
         * in the `eventInfo` to be logged
         */
        function configureActiveSquareListeners() {
            document.querySelectorAll(".square").forEach((square) => {
                for (const input of document.querySelectorAll(".input-check")) {
                    const eventType = input.getAttribute("name");

                    if (!eventType || !(input instanceof HTMLInputElement)) {
                        return;
                    }

                    square.addEventListener(eventType, (e) => {
                        if (e.type.startsWith("gesture")) {
                            e.preventDefault();
                            e.stopPropagation();
                        }

                        if (!input.checked) {
                            return;
                        }
                        const newNode = document.createTextNode(e.type);
                        const output = document.querySelector(".output")!;
                        output.appendChild(newNode);
                        output.appendChild(document.createElement("br"));
                        output.scrollTop = output.scrollHeight;
                    });
                }
            });
        }

        /**
         * Setup listeners for the "all on" and "all off" toggles, with properly bounded scopes to only toggle
         * checks in their sections
         */
        function configureCheckSectionToggles() {
            document.querySelectorAll(".check-section").forEach((section) => {
                const sectionChecks: HTMLInputElement[] = [
                    ...section.querySelectorAll(".input-check"),
                ].filter((el): el is HTMLInputElement => el instanceof HTMLInputElement);

                section.querySelectorAll(".section-header button").forEach((button) => {
                    if (!(button instanceof HTMLButtonElement)) {
                        return;
                    }

                    const isOnButton = !!button.getAttribute("name")?.endsWith(allOnAppend);

                    button.addEventListener("click", () => {
                        sectionChecks.forEach((check) => (check.checked = isOnButton));
                    });
                });
            });
        }

        /** Run the above event listener handling scripts */
        configureActiveSquareListeners();
        configureCheckSectionToggles();
    </script>
</Page>
<style lang="less">
    * {
        user-select: none;
        -webkit-user-select: none;
    }

    html {
        height: 100%;
        width: 100%;
        display: flex;
    }

    body,
    main {
        display: flex;
        overflow: hidden;
        flex-grow: 1;
    }

    main {
        height: 100%;
    }

    body {
        flex-direction: column;
    }

    .input-output {
        display: flex;
        flex-grow: 1;
        overflow: hidden;

        .inputs {
            display: flex;
            flex-direction: column;
        }
    }

    .square {
        display: flex;
        flex-grow: 1;

        min-height: 100px;
        margin: 20px;
        border: 4px solid skyblue;
        justify-content: center;
        align-items: center;
    }

    .output {
        display: flex;
        flex-grow: 1;
        overflow: scroll;
        user-select: text;
        border: 4px solid black;
        margin: 20px;
        padding: 8px;
    }

    .check-container {
        display: flex;
        flex-direction: column;
        overflow: scroll;

        min-height: 200px;

        .check-section {
            margin: 8px;
            .section-header {
                display: flex;
                align-items: center;

                button {
                    height: 32px;
                }

                * + * {
                    margin-left: 8px;
                }
            }
        }
    }

    // Responsive affordances - mostly, swap columns and rows and force collapsing behavior
    @media screen and (max-width: 600px) {
        main,
        .input-output {
            flex-direction: column;
        }

        .inputs,
        .check-container {
            flex-direction: row;
        }

        .check-container {
            flex-basis: 0px;
            flex-wrap: wrap;
        }
    }
</style>
